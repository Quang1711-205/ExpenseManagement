package com.example.expensemanagement;

import android.app.DatePickerDialog;
import android.content.ContentValues;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.*;
import androidx.activity.OnBackPressedCallback;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import database.DatabaseHelper;
import models.BudgetPlan;
import adapters.CreateBudgetAdapter;
import android.content.SharedPreferences;


import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class CreateBudgetActivity extends AppCompatActivity {

    private static final String TAG = "CreateBudgetActivity";
    private static final String PREFS_NAME = "MoneyMasterPrefs";
    private static final String KEY_USER_ID = "userId";
    private String currentUserId;
    private EditText etBudgetName;
    private EditText etTotalBudgetPlan;
    private Spinner spinnerBudgetPeriod;
    private TextView tvStartDate, tvEndDate, tvTotalBudget, tvRemainingBudget;
    private Button btnSelectStartDate, btnSelectEndDate, btnSaveBudget, btnAddCategory;
    private ImageButton btnBack;
    private RecyclerView rvCategoryBudgets;
    private LinearLayout llEmptyCategories;

    private DatabaseHelper dbHelper;
    private CreateBudgetAdapter adapter;
    private List<BudgetPlan.CategoryBudget> categoryBudgets;
    private List<BudgetPlan.CategoryBudget> availableCategories;
    private final SimpleDateFormat dateFormatter;
    private final NumberFormat currencyFormatter;

    // ‚úÖ TH√äM M·ªöI: Bi·∫øn ƒë·ªÉ theo d√µi s·ªë d∆∞ hi·ªán t·∫°i
    private double currentBalance = 0;
    private ExecutorService executor;

    private Date startDate, endDate;

    public CreateBudgetActivity() {
        this.dateFormatter = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());
        this.currencyFormatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        this.executor = Executors.newSingleThreadExecutor(); // ‚úÖ TH√äM M·ªöI
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_create_budget);

        getCurrentUserId();
        if (currentUserId == null || currentUserId.isEmpty()) {
            return; // Activity s·∫Ω b·ªã ƒë√≥ng b·ªüi showErrorAndFinish()
        }

        initializeComponents();
        loadAvailableCategories();
        setupEventListeners();
        setupBackPressHandler();
        updateUI();

        // ‚úÖ TH√äM M·ªöI: T√≠nh s·ªë d∆∞ hi·ªán t·∫°i
        calculateCurrentBalance();
    }

    private void getCurrentUserId() {
        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
        String userIdFromIntent = getIntent().getStringExtra("user_id");

        if (userIdFromIntent != null && !userIdFromIntent.isEmpty()) {
            Log.d(TAG, "‚úÖ Got user ID from intent: " + userIdFromIntent);
            prefs.edit().putString(KEY_USER_ID, userIdFromIntent).apply();
            currentUserId = userIdFromIntent;
        } else {
            // ‚úÖ FIX: ƒê·ªçc userId d∆∞·ªõi d·∫°ng int, sau ƒë√≥ convert sang String
            int userIdInt = prefs.getInt(KEY_USER_ID, -1);
            if (userIdInt != -1) {
                currentUserId = String.valueOf(userIdInt);
                Log.d(TAG, "üîç Got user ID from prefs (int->string): " + currentUserId);
            } else {
                currentUserId = null;
                Log.d(TAG, "‚ùå No user ID found in prefs");
            }
        }

        // ‚úÖ STRICT VALIDATION: B√°o l·ªói n·∫øu kh√¥ng c√≥ user ID
        if (currentUserId == null || currentUserId.isEmpty()) {
            Log.e(TAG, "‚ùå CRITICAL: No user ID found!");
            showErrorAndFinish("L·ªói h·ªá th·ªëng: Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            return;
        }

        Log.d(TAG, "üéØ Using user ID: " + currentUserId);
    }

    private void showErrorAndFinish(String message) {
        new AlertDialog.Builder(this)
                .setTitle("‚ùå L·ªói")
                .setMessage(message)
                .setPositiveButton("OK", (dialog, which) -> {
                    setResult(RESULT_CANCELED);
                    finish();
                })
                .setCancelable(false)
                .show();
    }

    private void initializeComponents() {
        etBudgetName = findViewById(R.id.et_budget_name);
        etTotalBudgetPlan = findViewById(R.id.et_total_budget_plan);
        spinnerBudgetPeriod = findViewById(R.id.spinner_budget_period);
        tvStartDate = findViewById(R.id.tv_start_date);
        tvEndDate = findViewById(R.id.tv_end_date);
        tvTotalBudget = findViewById(R.id.tv_total_budget);
        tvRemainingBudget = findViewById(R.id.tv_remaining_budget);
        btnSelectStartDate = findViewById(R.id.btn_select_start_date);
        btnSelectEndDate = findViewById(R.id.btn_select_end_date);
        btnSaveBudget = findViewById(R.id.btn_save_budget);
        btnAddCategory = findViewById(R.id.btn_add_category);
        btnBack = findViewById(R.id.btn_back);
        rvCategoryBudgets = findViewById(R.id.rv_category_budgets);
        llEmptyCategories = findViewById(R.id.ll_empty_categories);

        dbHelper = new DatabaseHelper(this);
        categoryBudgets = new ArrayList<>();
        availableCategories = new ArrayList<>();

        // Setup RecyclerView
        adapter = new CreateBudgetAdapter(categoryBudgets, this::updateTotalBudget);
        rvCategoryBudgets.setLayoutManager(new LinearLayoutManager(this));
        rvCategoryBudgets.setAdapter(adapter);

        // Setup Spinner with hardcoded array
        setupBudgetPeriodSpinner();

        // Set default dates based on monthly period
        autoSetDatesByPeriod();
    }

    // ‚úÖ TH√äM M·ªöI: Method t√≠nh s·ªë d∆∞ hi·ªán t·∫°i
    private void calculateCurrentBalance() {
        executor.execute(() -> {
            try {
                SQLiteDatabase db = dbHelper.getReadableDatabase();

                // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng currentUserId thay v√¨ hardcode "1"
                String incomeQuery = "SELECT COALESCE(SUM(" + DatabaseHelper.COLUMN_AMOUNT + "), 0) " +
                        "FROM " + DatabaseHelper.TABLE_TRANSACTIONS + " " +
                        "WHERE " + DatabaseHelper.COLUMN_TYPE + " = 'income' " +
                        "AND " + DatabaseHelper.COLUMN_USER_ID + " = ?";

                Cursor incomeCursor = db.rawQuery(incomeQuery, new String[]{currentUserId});
                double totalIncome = 0;
                if (incomeCursor.moveToFirst()) {
                    totalIncome = incomeCursor.getDouble(0);
                }
                incomeCursor.close();

                // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng currentUserId thay v√¨ hardcode "1"
                String expenseQuery = "SELECT COALESCE(SUM(" + DatabaseHelper.COLUMN_AMOUNT + "), 0) " +
                        "FROM " + DatabaseHelper.TABLE_TRANSACTIONS + " " +
                        "WHERE " + DatabaseHelper.COLUMN_TYPE + " = 'expense' " +
                        "AND " + DatabaseHelper.COLUMN_USER_ID + " = ?";

                Cursor expenseCursor = db.rawQuery(expenseQuery, new String[]{currentUserId});
                double totalExpense = 0;
                if (expenseCursor.moveToFirst()) {
                    totalExpense = expenseCursor.getDouble(0);
                }
                expenseCursor.close();

                currentBalance = totalIncome - totalExpense;

                runOnUiThread(() -> {
                    Log.d(TAG, "üí∞ Current balance for user " + currentUserId + ": " +
                            String.format("%.0f VND", currentBalance));
                });

            } catch (Exception e) {
                Log.e(TAG, "‚ùå Error calculating balance: " + e.getMessage());
                currentBalance = 0;
            }
        });
    }


    private void setupBudgetPeriodSpinner() {
        String[] budgetPeriods = {"H√†ng tu·∫ßn", "H√†ng th√°ng", "H√†ng nƒÉm"};
        ArrayAdapter<String> spinnerAdapter = new ArrayAdapter<>(this,
                android.R.layout.simple_spinner_item, budgetPeriods);
        spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinnerBudgetPeriod.setAdapter(spinnerAdapter);

        // Set default to "H√†ng th√°ng"
        spinnerBudgetPeriod.setSelection(1);
    }

    private void loadAvailableCategories() {
        availableCategories.clear();
        SQLiteDatabase db = dbHelper.getReadableDatabase();
        String query = "SELECT * FROM " + DatabaseHelper.TABLE_CATEGORIES +
                " WHERE " + DatabaseHelper.COLUMN_CATEGORY_TYPE + " = 'expense'" +
                " ORDER BY " + DatabaseHelper.COLUMN_NAME;

        Cursor cursor = db.rawQuery(query, null);

        if (cursor.moveToFirst()) {
            do {
                int idIndex = cursor.getColumnIndex(DatabaseHelper.COLUMN_ID);
                int nameIndex = cursor.getColumnIndex(DatabaseHelper.COLUMN_NAME);
                int iconIndex = cursor.getColumnIndex(DatabaseHelper.COLUMN_CATEGORY_ICON);
                int colorIndex = cursor.getColumnIndex(DatabaseHelper.COLUMN_CATEGORY_COLOR);

                if (idIndex >= 0 && nameIndex >= 0) {
                    BudgetPlan.CategoryBudget categoryBudget = new BudgetPlan.CategoryBudget();
                    categoryBudget.setCategoryId(cursor.getInt(idIndex));
                    categoryBudget.setCategoryName(cursor.getString(nameIndex));

                    if (iconIndex >= 0) {
                        categoryBudget.setCategoryIcon(cursor.getString(iconIndex));
                    } else {
                        categoryBudget.setCategoryIcon("üìÇ");
                    }

                    if (colorIndex >= 0) {
                        categoryBudget.setCategoryColor(cursor.getString(colorIndex));
                    } else {
                        categoryBudget.setCategoryColor("#2196F3");
                    }

                    categoryBudget.setAllocatedAmount(0);
                    availableCategories.add(categoryBudget);
                }
            } while (cursor.moveToNext());
        }

        cursor.close();
    }

    private void setupEventListeners() {
        btnBack.setOnClickListener(v -> handleBackPress());

        btnSelectStartDate.setOnClickListener(v -> showDatePicker(true));
        btnSelectEndDate.setOnClickListener(v -> showDatePicker(false));

        btnSaveBudget.setOnClickListener(v -> saveBudget());

        btnAddCategory.setOnClickListener(v -> showCategorySelectionDialog());

        spinnerBudgetPeriod.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                autoSetDatesByPeriod();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {}
        });

        etTotalBudgetPlan.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable s) {
                updateRemainingBudget();
            }
        });
    }

    private void setupBackPressHandler() {
        OnBackPressedCallback callback = new OnBackPressedCallback(true) {
            @Override
            public void handleOnBackPressed() {
                handleBackPress();
            }
        };
        getOnBackPressedDispatcher().addCallback(this, callback);
    }

    private void handleBackPress() {
        boolean hasData = false;
        String budgetName = etBudgetName.getText().toString().trim();
        String budgetPlan = etTotalBudgetPlan.getText().toString().trim();

        if (!budgetName.isEmpty() || !budgetPlan.isEmpty()) {
            hasData = true;
        }

        for (BudgetPlan.CategoryBudget category : categoryBudgets) {
            if (category.getAllocatedAmount() > 0) {
                hasData = true;
                break;
            }
        }

        if (hasData) {
            new AlertDialog.Builder(this)
                    .setTitle("Tho√°t t·∫°o ng√¢n s√°ch?")
                    .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t? D·ªØ li·ªáu ƒë√£ nh·∫≠p s·∫Ω b·ªã m·∫•t.")
                    .setPositiveButton("Tho√°t", (dialog, which) -> finish())
                    .setNegativeButton("·ªû l·∫°i", null)
                    .show();
        } else {
            finish();
        }
    }

    private void showCategorySelectionDialog() {
        List<BudgetPlan.CategoryBudget> notAddedCategories = new ArrayList<>();
        for (BudgetPlan.CategoryBudget available : availableCategories) {
            boolean isAlreadyAdded = false;
            for (BudgetPlan.CategoryBudget added : categoryBudgets) {
                if (added.getCategoryId() == available.getCategoryId()) {
                    isAlreadyAdded = true;
                    break;
                }
            }
            if (!isAlreadyAdded) {
                notAddedCategories.add(available);
            }
        }

        if (notAddedCategories.isEmpty()) {
            Toast.makeText(this, "T·∫•t c·∫£ danh m·ª•c ƒë√£ ƒë∆∞·ª£c th√™m", Toast.LENGTH_SHORT).show();
            return;
        }

        String[] categoryNames = new String[notAddedCategories.size()];
        for (int i = 0; i < notAddedCategories.size(); i++) {
            categoryNames[i] = notAddedCategories.get(i).getCategoryIcon() + " " +
                    notAddedCategories.get(i).getCategoryName();
        }

        boolean[] selectedCategories = new boolean[notAddedCategories.size()];

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Ch·ªçn danh m·ª•c")
                .setMultiChoiceItems(categoryNames, selectedCategories,
                        (dialog, which, isChecked) -> selectedCategories[which] = isChecked)
                .setPositiveButton("Th√™m", (dialog, which) -> {
                    for (int i = 0; i < selectedCategories.length; i++) {
                        if (selectedCategories[i]) {
                            BudgetPlan.CategoryBudget category = new BudgetPlan.CategoryBudget();
                            BudgetPlan.CategoryBudget source = notAddedCategories.get(i);

                            category.setCategoryId(source.getCategoryId());
                            category.setCategoryName(source.getCategoryName());
                            category.setCategoryIcon(source.getCategoryIcon());
                            category.setCategoryColor(source.getCategoryColor());
                            category.setAllocatedAmount(0);

                            categoryBudgets.add(category);
                        }
                    }
                    adapter.notifyDataSetChanged();
                    updateUI();
                    updateRemainingBudget();
                })
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void showDatePicker(boolean isStartDate) {
        Calendar calendar = Calendar.getInstance();

        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, year, month, dayOfMonth) -> {
                    Calendar selectedDate = Calendar.getInstance();
                    selectedDate.set(year, month, dayOfMonth);

                    if (isStartDate) {
                        startDate = selectedDate.getTime();
                        tvStartDate.setText(dateFormatter.format(startDate));
                    } else {
                        endDate = selectedDate.getTime();
                        tvEndDate.setText(dateFormatter.format(endDate));
                    }
                },
                calendar.get(Calendar.YEAR),
                calendar.get(Calendar.MONTH),
                calendar.get(Calendar.DAY_OF_MONTH)
        );

        datePickerDialog.show();
    }

    private void autoSetDatesByPeriod() {
        String selectedPeriod = spinnerBudgetPeriod.getSelectedItem().toString();
        Calendar calendar = Calendar.getInstance();

        String period = mapDisplayNameToPeriod(selectedPeriod);

        switch (period) {
            case "monthly":
                calendar.set(Calendar.DAY_OF_MONTH, 1);
                startDate = calendar.getTime();
                calendar.add(Calendar.MONTH, 1);
                calendar.add(Calendar.DAY_OF_MONTH, -1);
                endDate = calendar.getTime();
                break;

            case "weekly":
                calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
                startDate = calendar.getTime();
                calendar.add(Calendar.WEEK_OF_YEAR, 1);
                calendar.add(Calendar.DAY_OF_MONTH, -1);
                endDate = calendar.getTime();
                break;

            case "yearly":
                calendar.set(Calendar.DAY_OF_YEAR, 1);
                startDate = calendar.getTime();
                calendar.add(Calendar.YEAR, 1);
                calendar.add(Calendar.DAY_OF_MONTH, -1);
                endDate = calendar.getTime();
                break;
        }

        if (startDate != null) tvStartDate.setText(dateFormatter.format(startDate));
        if (endDate != null) tvEndDate.setText(dateFormatter.format(endDate));
    }

    private String mapDisplayNameToPeriod(String displayName) {
        switch (displayName) {
            case "H√†ng tu·∫ßn": return "weekly";
            case "H√†ng th√°ng": return "monthly";
            case "H√†ng nƒÉm": return "yearly";
            default: return "monthly";
        }
    }

    private void updateTotalBudget() {
        double total = 0;
        for (BudgetPlan.CategoryBudget category : categoryBudgets) {
            total += category.getAllocatedAmount();
        }
        tvTotalBudget.setText(String.format("%.0f VND", total));

        updateUI();
        updateRemainingBudget();
    }

    private void updateRemainingBudget() {
        try {
            String plannedBudgetStr = etTotalBudgetPlan.getText().toString().trim();
            double plannedBudget = plannedBudgetStr.isEmpty() ? 0 : Double.parseDouble(plannedBudgetStr);

            double allocatedBudget = 0;
            for (BudgetPlan.CategoryBudget category : categoryBudgets) {
                allocatedBudget += category.getAllocatedAmount();
            }

            double remaining = plannedBudget - allocatedBudget;

            String remainingText;
            if (remaining > 0) {
                remainingText = "C√≤n l·∫°i: " + String.format("%.0f VND", remaining);
                tvRemainingBudget.setTextColor(getResources().getColor(android.R.color.black));
            } else if (remaining == 0) {
                remainingText = "ƒê√£ ph√¢n b·ªï ƒë·ªß: " + String.format("%.0f VND", Math.abs(remaining));
                tvRemainingBudget.setTextColor(getResources().getColor(android.R.color.holo_green_dark));
            } else {
                remainingText = "V∆∞·ª£t qu√°: " + String.format("%.0f VND", Math.abs(remaining));
                tvRemainingBudget.setTextColor(getResources().getColor(android.R.color.holo_red_dark));
            }

            tvRemainingBudget.setText(remainingText);

        } catch (NumberFormatException e) {
            tvRemainingBudget.setText("C√≤n l·∫°i: 0 VND");
            tvRemainingBudget.setTextColor(getResources().getColor(android.R.color.black));
        }
    }

    private void updateUI() {
        if (categoryBudgets.isEmpty()) {
            llEmptyCategories.setVisibility(View.VISIBLE);
            rvCategoryBudgets.setVisibility(View.GONE);
        } else {
            llEmptyCategories.setVisibility(View.GONE);
            rvCategoryBudgets.setVisibility(View.VISIBLE);
        }
    }

    // ‚úÖ S·ª¨A L·∫†I: Method saveBudget v·ªõi ki·ªÉm tra s·ªë d∆∞
    private void saveBudget() {
        String budgetName = etBudgetName.getText().toString().trim();
        String plannedBudgetStr = etTotalBudgetPlan.getText().toString().trim();
        String selectedPeriod = spinnerBudgetPeriod.getSelectedItem().toString();

        // T·∫°o bi·∫øn final ƒë·ªÉ s·ª≠ d·ª•ng trong lambda
        final String finalBudgetName = budgetName;
        final String finalPeriod = mapDisplayNameToPeriod(selectedPeriod);

        // Validation c∆° b·∫£n
        if (budgetName.isEmpty()) {
            etBudgetName.setError("Vui l√≤ng nh·∫≠p t√™n ng√¢n s√°ch");
            etBudgetName.requestFocus();
            return;
        }

        if (startDate == null || endDate == null) {
            Toast.makeText(this, "Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c", Toast.LENGTH_SHORT).show();
            return;
        }

        // ‚úÖ KI·ªÇM TRA NG√ÇN S√ÅCH D·ª∞ KI·∫æN V·ªöI S·ªê D∆Ø
        double plannedBudget = 0;
        if (!plannedBudgetStr.isEmpty()) {
            try {
                plannedBudget = Double.parseDouble(plannedBudgetStr);

                // T·∫°o bi·∫øn final cho lambda
                final double finalPlannedBudget = plannedBudget;

                // Ki·ªÉm tra v·ªõi s·ªë d∆∞ hi·ªán t·∫°i
                if (plannedBudget > currentBalance) {
                    new AlertDialog.Builder(this)
                            .setTitle("‚ö†Ô∏è V∆∞·ª£t qu√° s·ªë d∆∞")
                            .setMessage("Ng√¢n s√°ch d·ª± ki·∫øn (" + String.format("%.0f VND", finalPlannedBudget) +
                                    ") v∆∞·ª£t qu√° s·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n (" + String.format("%.0f VND", currentBalance) +
                                    ").\n\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c t·∫°o ng√¢n s√°ch kh√¥ng?")
                            .setPositiveButton("Ti·∫øp t·ª•c", (dialog, which) -> validateAndSave(finalBudgetName, finalPeriod, finalPlannedBudget))
                            .setNegativeButton("H·ªßy", null)
                            .show();
                    return;
                }
            } catch (NumberFormatException e) {
                etTotalBudgetPlan.setError("Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá");
                etTotalBudgetPlan.requestFocus();
                return;
            }
        }

        // T·∫°o bi·∫øn final cho lambda (tr∆∞·ªùng h·ª£p plannedBudget = 0)
        final double finalPlannedBudget = plannedBudget;

        // Ti·∫øp t·ª•c validate v√† save
        validateAndSave(finalBudgetName, finalPeriod, finalPlannedBudget);
    }

    // ‚úÖ TH√äM M·ªöI: Method validate v√† save (t√°ch ri√™ng ƒë·ªÉ t√°i s·ª≠ d·ª•ng)
    private void validateAndSave(String budgetName, String period, double plannedBudget) {
        double totalBudget = 0;
        for (BudgetPlan.CategoryBudget category : categoryBudgets) {
            totalBudget += category.getAllocatedAmount();
        }

        if (totalBudget <= 0) {
            Toast.makeText(this, "Vui l√≤ng ph√¢n b·ªï ng√¢n s√°ch cho √≠t nh·∫•t m·ªôt danh m·ª•c", Toast.LENGTH_SHORT).show();
            return;
        }

        // T·∫°o bi·∫øn final ƒë·ªÉ s·ª≠ d·ª•ng trong lambda
        final String finalBudgetName = budgetName;
        final String finalPeriod = period;
        final double finalTotalBudget = totalBudget;

        // ‚úÖ KI·ªÇM TRA T·ªîNG PH√ÇN B·ªî V·ªöI S·ªê D∆Ø
        if (totalBudget > currentBalance) {
            new AlertDialog.Builder(this)
                    .setTitle("‚ö†Ô∏è T·ªïng ph√¢n b·ªï v∆∞·ª£t s·ªë d∆∞")
                    .setMessage("T·ªïng ng√¢n s√°ch ƒë√£ ph√¢n b·ªï (" + String.format("%.0f VND", finalTotalBudget) +
                            ") v∆∞·ª£t qu√° s·ªë d∆∞ hi·ªán t·∫°i (" + String.format("%.0f VND", currentBalance) +
                            ").\n\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o?")
                    .setPositiveButton("T·∫°o", (dialog, which) -> showConfirmationDialog(finalBudgetName, finalPeriod, finalTotalBudget))
                    .setNegativeButton("H·ªßy", null)
                    .show();
            return;
        }

        // Show confirmation dialog
        showConfirmationDialog(finalBudgetName, finalPeriod, finalTotalBudget);
    }

    // ‚úÖ TH√äM M·ªöI: T√°ch confirmation dialog th√†nh method ri√™ng
    private void showConfirmationDialog(String budgetName, String period, double totalBudget) {
        // T·∫°o bi·∫øn final ƒë·ªÉ s·ª≠ d·ª•ng trong lambda
        final String finalBudgetName = budgetName;
        final String finalPeriod = period;
        final double finalTotalBudget = totalBudget;

        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n t·∫°o ng√¢n s√°ch")
                .setMessage("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫°o ng√¢n s√°ch \"" + finalBudgetName +
                        "\" v·ªõi t·ªïng s·ªë ti·ªÅn " + String.format("%.0f VND", finalTotalBudget) + "?")
                .setPositiveButton("T·∫°o", (dialog, which) -> saveBudgetToDatabase(finalBudgetName, finalPeriod, finalTotalBudget))
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void saveBudgetToDatabase(String budgetName, String period, double totalBudget) {
        // ‚úÖ DOUBLE CHECK: Ki·ªÉm tra user ID tr∆∞·ªõc khi save
        if (currentUserId == null || currentUserId.isEmpty()) {
            showErrorAndFinish("L·ªói: Kh√¥ng th·ªÉ l∆∞u ng√¢n s√°ch do thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng.");
            return;
        }

        Toast.makeText(this, "ƒêang t·∫°o ng√¢n s√°ch...", Toast.LENGTH_SHORT).show();

        SQLiteDatabase db = dbHelper.getWritableDatabase();
        db.beginTransaction();

        try {
            for (BudgetPlan.CategoryBudget category : categoryBudgets) {
                if (category.getAllocatedAmount() > 0) {
                    ContentValues values = new ContentValues();
                    values.put(DatabaseHelper.COLUMN_CATEGORY_ID, category.getCategoryId());
                    values.put(DatabaseHelper.COLUMN_BUDGET_AMOUNT, category.getAllocatedAmount());
                    values.put(DatabaseHelper.COLUMN_BUDGET_PERIOD, period);
                    values.put(DatabaseHelper.COLUMN_BUDGET_START_DATE, dateFormatter.format(startDate));
                    values.put(DatabaseHelper.COLUMN_BUDGET_END_DATE, dateFormatter.format(endDate));
                    values.put(DatabaseHelper.COLUMN_BUDGET_NAME, budgetName);

                    // ‚úÖ STRICT: S·ª≠ d·ª•ng currentUserId (ƒë√£ validate)
                    values.put(DatabaseHelper.COLUMN_USER_ID, currentUserId);

                    long result = db.insert(DatabaseHelper.TABLE_BUDGETS, null, values);

                    if (result == -1) {
                        throw new Exception("L·ªói khi l∆∞u danh m·ª•c: " + category.getCategoryName());
                    }

                    Log.d(TAG, "‚úÖ Saved budget category for user " + currentUserId +
                            ": " + category.getCategoryName() + " - " + category.getAllocatedAmount());
                }
            }

            db.setTransactionSuccessful();

            Log.d(TAG, "üéâ Budget saved successfully for user: " + currentUserId);

            new AlertDialog.Builder(this)
                    .setTitle("Th√†nh c√¥ng!")
                    .setMessage("Ng√¢n s√°ch \"" + budgetName + "\" ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi t·ªïng s·ªë ti·ªÅn " +
                            String.format("%.0f VND", totalBudget))
                    .setPositiveButton("OK", (dialog, which) -> {
                        setResult(RESULT_OK);
                        finish();
                    })
                    .setCancelable(false)
                    .show();

        } catch (Exception e) {
            Log.e(TAG, "‚ùå Error saving budget: " + e.getMessage());
            new AlertDialog.Builder(this)
                    .setTitle("L·ªói")
                    .setMessage("C√≥ l·ªói khi t·∫°o ng√¢n s√°ch: " + e.getMessage())
                    .setPositiveButton("OK", null)
                    .show();
        } finally {
            db.endTransaction();
        }
    }

    private void debugUserInfo() {
        Log.d(TAG, "=== DEBUG USER INFO ===");
        Log.d(TAG, "Current User ID: " + currentUserId);
        Log.d(TAG, "Intent User ID: " + getIntent().getStringExtra("user_id"));

        SharedPreferences prefs = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);
        Log.d(TAG, "Prefs User ID: " + prefs.getString(KEY_USER_ID, "none"));
        Log.d(TAG, "======================");

        // Show in Toast for immediate feedback
        Toast.makeText(this, "Current User ID: " + currentUserId, Toast.LENGTH_LONG).show();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (executor != null && !executor.isShutdown()) {
            executor.shutdown();
        }
    }
}