package com.example.expensemanagement;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.util.Log;

import androidx.core.app.NotificationCompat;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.Random;

public class SimpleBackgroundService extends Service {

    private static final String TAG = "SimpleBackgroundService";
    private static final String CHANNEL_ID = "simple_background_channel";
    private static final String CHANNEL_ID_ALERTS = "simple_alerts_channel";
    private static final int FOREGROUND_NOTIFICATION_ID = 1001;

    // Interval cho c√°c check kh√°c nhau
    private static final long DAILY_CHECK_INTERVAL = 24 * 60 * 60 * 1000; // 24 gi·ªù
    private static final long BUDGET_CHECK_INTERVAL = 60 * 60 * 1000; // 1 gi·ªù
    private static final long TEST_INTERVAL = 30 * 1000; // 30 gi√¢y cho test

    private Handler handler;
    private Runnable dailyReminderRunnable;
    private Runnable budgetCheckRunnable;
    private SharedPreferences sharedPreferences;
    private int testCounter = 0;
    private boolean isServiceRunning = false;

    @Override
    public void onCreate() {
        super.onCreate();
        Log.d(TAG, "=== SimpleBackgroundService onCreate() ===");

        try {
            // Kh·ªüi t·∫°o SharedPreferences
            sharedPreferences = getSharedPreferences("MoneyMasterPrefs", MODE_PRIVATE);

            // T·∫°o notification channels
            createNotificationChannels();

            // Kh·ªüi t·∫°o handler
            handler = new Handler(Looper.getMainLooper());

            // T·∫°o c√°c runnable
            setupRunnables();

            Log.d(TAG, "Service created successfully");

        } catch (Exception e) {
            Log.e(TAG, "Error in onCreate: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "=== SimpleBackgroundService onStartCommand() ===");

        try {
            // B·∫Øt bu·ªôc start foreground tr∆∞·ªõc
            startForeground(FOREGROUND_NOTIFICATION_ID, createForegroundNotification());
            Log.d(TAG, "Started as foreground service");

            // ƒê√°nh d·∫•u service ƒëang ch·∫°y
            isServiceRunning = true;

            // G·ª≠i notification kh·ªüi ƒë·ªông
            sendStartupNotification();

            // B·∫Øt ƒë·∫ßu c√°c task ƒë·ªãnh k·ª≥
            startPeriodicTasks();

            Log.d(TAG, "Service started successfully");

        } catch (Exception e) {
            Log.e(TAG, "Error in onStartCommand: " + e.getMessage());
            e.printStackTrace();
        }

        return START_STICKY; // Service s·∫Ω ƒë∆∞·ª£c restart n·∫øu b·ªã kill
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "=== SimpleBackgroundService onDestroy() ===");

        try {
            isServiceRunning = false;

            // D·ªçn d·∫πp handler
            if (handler != null) {
                handler.removeCallbacks(dailyReminderRunnable);
                handler.removeCallbacks(budgetCheckRunnable);
                Log.d(TAG, "All callbacks removed");
            }

            // G·ª≠i notification d·ª´ng
            sendShutdownNotification();

        } catch (Exception e) {
            Log.e(TAG, "Error in onDestroy: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void createNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationManager manager = getSystemService(NotificationManager.class);

            if (manager != null) {
                // Channel cho foreground service (priority th·∫•p)
                NotificationChannel serviceChannel = new NotificationChannel(
                        CHANNEL_ID,
                        "D·ªãch v·ª• qu·∫£n l√Ω chi ti√™u",
                        NotificationManager.IMPORTANCE_LOW
                );
                serviceChannel.setDescription("D·ªãch v·ª• ch·∫°y ng·∫ßm theo d√µi chi ti√™u");
                serviceChannel.setShowBadge(false);
                manager.createNotificationChannel(serviceChannel);

                // üî• Channel cho th√¥ng b√°o (IMPORTANCE_HIGH ƒë·ªÉ c√≥ heads-up)
                NotificationChannel alertChannel = new NotificationChannel(
                        CHANNEL_ID_ALERTS,
                        "Th√¥ng b√°o chi ti√™u",
                        NotificationManager.IMPORTANCE_HIGH // üî• HIGH IMPORTANCE
                );
                alertChannel.setDescription("Nh·∫Øc nh·ªü v√† c·∫£nh b√°o v·ªÅ chi ti√™u");
                alertChannel.setShowBadge(true);
                alertChannel.enableVibration(true);
                alertChannel.setVibrationPattern(new long[]{0, 500, 200, 500}); // üî• VIBRATION PATTERN
                alertChannel.enableLights(true);
                alertChannel.setLightColor(0xFF00FF00); // üî• LIGHT COLOR
                alertChannel.setLockscreenVisibility(NotificationCompat.VISIBILITY_PUBLIC); // üî• HI·ªÜN TR√äN LOCK SCREEN
                manager.createNotificationChannel(alertChannel);

                Log.d(TAG, "‚úÖ Notification channels created with HIGH priority");
            }
        }
    }

    private Notification createForegroundNotification() {
        Intent notificationIntent = new Intent(this, MainActivity.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                this, 0, notificationIntent,
                Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ?
                        PendingIntent.FLAG_IMMUTABLE : 0);

        String currentTime = new SimpleDateFormat("HH:mm", Locale.getDefault()).format(new Date());

        return new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Money Master Pro")
                .setContentText("D·ªãch v·ª• ƒëang ho·∫°t ƒë·ªông - " + currentTime)
                .setSmallIcon(android.R.drawable.ic_dialog_info)
                .setContentIntent(pendingIntent)
                .setOngoing(true)
                .setPriority(NotificationCompat.PRIORITY_LOW)
                .setShowWhen(false)
                .build();
    }

    private void setupRunnables() {
        // Runnable cho nh·∫Øc nh·ªü h√†ng ng√†y
        dailyReminderRunnable = new Runnable() {
            @Override
            public void run() {
                if (!isServiceRunning) return;

                Log.d(TAG, "Daily reminder check");
                sendDailyReminder();

                // L√™n l·ªãch cho l·∫ßn ti·∫øp theo
                handler.postDelayed(this, DAILY_CHECK_INTERVAL);
            }
        };

        // Runnable cho ki·ªÉm tra ng√¢n s√°ch
        budgetCheckRunnable = new Runnable() {
            @Override
            public void run() {
                if (!isServiceRunning) return;

                testCounter++;
                Log.d(TAG, "Budget check #" + testCounter);

                // Th·ª±c hi·ªán c√°c ki·ªÉm tra
                performBudgetCheck();

                // L√™n l·ªãch cho l·∫ßn ti·∫øp theo (d√πng TEST_INTERVAL cho demo)
                handler.postDelayed(this, TEST_INTERVAL);
            }
        };
    }

    private void startPeriodicTasks() {
        Log.d(TAG, "Starting periodic tasks");

        // B·∫Øt ƒë·∫ßu daily reminder (delay 5 gi√¢y)
        handler.postDelayed(dailyReminderRunnable, 5000);

        // B·∫Øt ƒë·∫ßu budget check (delay 10 gi√¢y)
        handler.postDelayed(budgetCheckRunnable, 10000);

        Log.d(TAG, "Periodic tasks scheduled");
    }

    private void sendStartupNotification() {
        String currentTime = new SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(new Date());
        sendNotification(
                "D·ªãch v·ª• ƒë√£ kh·ªüi ƒë·ªông",
                "Money Master Pro b·∫Øt ƒë·∫ßu theo d√µi chi ti√™u l√∫c " + currentTime,
                NotificationCompat.PRIORITY_DEFAULT
        );
    }

    private void sendShutdownNotification() {
        String currentTime = new SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(new Date());
        sendNotification(
                "D·ªãch v·ª• ƒë√£ d·ª´ng",
                "Money Master Pro ng·ª´ng theo d√µi l√∫c " + currentTime,
                NotificationCompat.PRIORITY_DEFAULT
        );
    }

    private void sendDailyReminder() {
        Log.d(TAG, "Sending daily reminder");

        String username = sharedPreferences.getString("username", "B·∫°n");

        sendNotification(
                "Nh·∫Øc nh·ªü h√†ng ng√†y",
                "Ch√†o " + username + "! ƒê√£ ghi ch√©p chi ti√™u h√¥m nay ch∆∞a?",
                NotificationCompat.PRIORITY_DEFAULT
        );
    }

    private void performBudgetCheck() {
        Log.d(TAG, "Performing budget check #" + testCounter);

        try {
            // Gi·∫£ l·∫≠p ki·ªÉm tra ng√¢n s√°ch
            Random random = new Random();
            boolean shouldAlert = random.nextBoolean();

            if (shouldAlert && testCounter % 3 == 0) {
                // Gi·∫£ l·∫≠p c·∫£nh b√°o v∆∞·ª£t ng√¢n s√°ch
                sendBudgetWarning();
            } else if (testCounter % 5 == 0) {
                // G·ª≠i b√°o c√°o ƒë·ªãnh k·ª≥
                sendPeriodicReport();
            } else {
                // Log b√¨nh th∆∞·ªùng
                Log.d(TAG, "Budget check completed - no alerts needed");
            }

        } catch (Exception e) {
            Log.e(TAG, "Error in budget check: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void sendBudgetWarning() {
        Log.d(TAG, "Sending budget warning");

        sendNotification(
                "C·∫£nh b√°o ng√¢n s√°ch",
                "Chi ti√™u th√°ng n√†y ƒë√£ v∆∞·ª£t 80% ng√¢n s√°ch d·ª± ki·∫øn!",
                NotificationCompat.PRIORITY_HIGH
        );
    }

    private void sendPeriodicReport() {
        Log.d(TAG, "Sending periodic report");

        String currentDate = new SimpleDateFormat("dd/MM", Locale.getDefault()).format(new Date());

        sendNotification(
                "B√°o c√°o chi ti√™u",
                "T√≠nh ƒë·∫øn " + currentDate + ": B·∫°n ƒë√£ chi ti√™u 1,250,000ƒë trong tu·∫ßn n√†y",
                NotificationCompat.PRIORITY_DEFAULT
        );
    }

    private void sendNotification(String title, String message, int priority) {
        try {
            // Ki·ªÉm tra quy·ªÅn notification
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                if (checkSelfPermission(android.Manifest.permission.POST_NOTIFICATIONS)
                        != getPackageManager().PERMISSION_GRANTED) {
                    Log.w(TAG, "No notification permission");
                    return;
                }
            }

            Intent intent = new Intent(this, MainActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);

            PendingIntent pendingIntent = PendingIntent.getActivity(
                    this,
                    (int) System.currentTimeMillis(),
                    intent,
                    Build.VERSION.SDK_INT >= Build.VERSION_CODES.M ?
                            PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE :
                            PendingIntent.FLAG_UPDATE_CURRENT
            );

            // üî• C·∫§U H√åNH ƒê·ªÇ C√ì HEADS-UP NOTIFICATION
            NotificationCompat.Builder builder = new NotificationCompat.Builder(this, CHANNEL_ID_ALERTS)
                    .setSmallIcon(android.R.drawable.ic_dialog_info)
                    .setContentTitle(title)
                    .setContentText(message)
                    .setStyle(new NotificationCompat.BigTextStyle().bigText(message))
                    .setPriority(NotificationCompat.PRIORITY_HIGH) // üî• B·∫ÆT BU·ªòC HIGH PRIORITY
                    .setContentIntent(pendingIntent)
                    .setAutoCancel(true)
                    .setDefaults(NotificationCompat.DEFAULT_ALL)
                    .setVibrate(new long[]{0, 500, 200, 500}) // üî• VIBRATION M·∫†NH
                    .setLights(0xFF00FF00, 1000, 1000) // üî• LED LIGHTS
                    .setCategory(NotificationCompat.CATEGORY_MESSAGE) // üî• CATEGORY MESSAGE
                    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC) // üî• HI·ªÜN C√îNG KHAI
                    .setFullScreenIntent(pendingIntent, false); // üî• FULL SCREEN INTENT

            // üî• ƒê·∫∂C BI·ªÜT QUAN TR·ªåNG: Th√™m sound URI
            android.net.Uri defaultSoundUri = android.media.RingtoneManager.getDefaultUri(android.media.RingtoneManager.TYPE_NOTIFICATION);
            builder.setSound(defaultSoundUri);

            NotificationManager notificationManager =
                    (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

            if (notificationManager != null) {
                int notificationId = (int) System.currentTimeMillis();
                notificationManager.notify(notificationId, builder.build());
                Log.d(TAG, "üî• HEADS-UP Notification sent: " + title + " (ID: " + notificationId + ")");
            }

        } catch (Exception e) {
            Log.e(TAG, "Error sending heads-up notification: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Method ƒë·ªÉ check tr·∫°ng th√°i service t·ª´ b√™n ngo√†i
    public static boolean isServiceRunning() {
        // ƒê√¢y l√† c√°ch ƒë∆°n gi·∫£n, c√≥ th·ªÉ implement ph·ª©c t·∫°p h∆°n n·∫øu c·∫ßn
        return true;
    }
}